source('~/Google Drive/R/HTMLScrapping.R', echo=TRUE)
source('~/Google Drive/Practical Machine Learning/PredictionCombinedModels.R', echo=TRUE)
x <- rnorm(100)
var(x)
hist(x)
plot(x,x)
qplot(x)
qqplot
qqplot(x)
qqplot(x,x)
which
which.max(x)
which.min(x)
x   <- seq(5,15,length=1000)
y   <- dnorm(x,mean=10, sd=3)
plot(x,y, type="l", lwd=1)
?seq
dnorm
?dnorm
?norm
?rnorm
x <- dnorm()
x <- rnorm()
x <- rnorm(100)
x <- rnorm(100)
x <- rnorm(100)
x <- rnorm()
x <- dnorm(100)
x
x <- seq(1:10)
x
which(x == 1)
rev()
rev(x)
which(x == 90)
which(x == 9)
table(x)
sum(x)
which.sum(x)
?which.max
cummax(x)
cummin()
cummin(x)
x
?cummax
cumprod(1:10)
cummax(c(3:1, 2:0, 4:2))
?paste
paste0(x)
paste0(x,x)
paste0("Juande")
paste0("Juande","Caballo")
paste("Juande","Caballo")
x
box(x)
pie()
pie(x)
boxplot(x)
sum(x)
summary(x)
x[11] <- 100
x
boxplot(x)
x[-11]
x
x <- x[-11]
x
for (x in 1:100)
i + 1
x
for (i in 1:100)
i
i
for (i in 1:100)
1 + 1
source('~/.active-rstudio-document', echo=TRUE)
foo = seq(1, 100, by=2)
foo.squared = NULL
for (i in 1:50 ) {
foo.squared[i] = foo[i]^2
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
i
source('~/.active-rstudio-document', echo=TRUE)
print(2)
print(a)
print(1:49)
install.packages("rvert")
install.packages("rvest")
install.packages("rvest")
install.packages(c("boot", "BradleyTerry2", "car", "caret", "class", "cluster", "codetools", "CORElearn", "DBI", "devtools", "digest", "foreign", "formatR", "Formula", "gsubfn", "highr", "Hmisc", "htmltools", "httpuv", "httr", "jsonlite", "KernSmooth", "knitr", "labeling", "lattice", "manipulate", "markdown", "MASS", "Matrix", "mgcv", "mime", "minqa", "nlme", "nnet", "RColorBrewer", "Rcpp", "RCurl", "reshape2", "Rfacebook", "rmarkdown", "rpart", "RSQLite", "rstudioapi", "spatial", "survival", "swirl", "xlsx", "xlsxjars"))
install.packages("rvest")
install.packages("rvest")
source('~/Google Drive/R/HTMLScrapping.R', echo=TRUE)
library(rvest)
lego_movie <- html("http://www.imdb.com/title/tt1490017/")
lego_movie %>%
html_node("strong span") %>%
html_text() %>%
as.numeric()
html_node("strong span")
html_node("strong span") %>%
html_text()
html_node("strong span") %>%
html_text() %>%
as.numeric()
lego_movie %>%
html_node("strong span") %>%
html_text() %>%
as.numeric()
lego_movie
lego_movie %>%
html_node("strong span") %>%
html_text() %>%
as.numeric()
?html_node
html_node(lego_movie)
html_node(lego_movie, "strong span")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
html_node(serebii, "dextable")
lego_movie %>%
html_node("strong span") %>%
html_text() %>%
as.numeric()
lego_movie %>%
html_node("strong span") %>%
html_text()
lego_movie %>%
html_node("strong span")
html_node(serebii, ".dextable tr:nth-child(2) .fooinfo:nth-child(2)")
html_node(serebii, ".dextable tr:nth-child(2) .fooinfo:nth-child(2)") %>%
html_text() %>%
html_text()
html_node(serebii, ".dextable tr:nth-child(2) .fooinfo:nth-child(2)") %>%
html_text()
html_node(serebii, ".fooinfo:nth-child(4)")
html_node(serebii, ".fooinfo:nth-child(4)") %>%
html_text()
html_node(serebii, "tr:nth-child(4) :nth-child(4)") %>%
html_text()
html_node(serebii, "tr:nth-child(4) :nth-child(4)") %>%
html_text() %>%
as.numeric()
html_node(serebii, "tr:nth-child(4) :nth-child(5)") %>%
html_text() %>%
as.numeric() #capture rate
html_text()
html_node(serebii, "tr:nth-child(4) :nth-child(5)") %>%
html_text()
?gsub
baseEggSteps <- gsub(",", "",html_node(serebii, "tr:nth-child(4) :nth-child(5)") %>%
html_text())
?html_text()
baseEggSteps <- html_node(serebii, "tr:nth-child(4) :nth-child(5)") %>%
html_text()
baseEggSteps <- gsub(",", "", baseEggSteps)
baseEggSteps <- as.numeric(gsub(",", "", baseEggSteps))
?l
`query_result.(1)` <- read.csv("~/Downloads/query_result (1).csv")
View(`query_result.(1)`)
df <- query_result.(1)
View(`query_result.(1)`)
query_result <- read.csv("~/Downloads/query_result.csv")
View(query_result)
df <- query_result
remove(query_result)
View(df)
x <- mydf[!sapply(mydf, function(x) all(x == ""))]
x <- df[!sapply(df, function(x) all(x == ""))]
df[, colSums(df != "") != 0]
summary(df)
clear
x <- df[!sapply(df, function(x) all(x == ""))]
mydf[, colSums(mydf != "") != 0]
x <- df[!sapply(df, function(x) all(x == ""))]
colSums(df)
df[, colSums(mydf != "") != 0]
df[, colSums(df != "") != 0]
df[, colSums(df != "") != 0]
homogenous = apply(df, 2, function(var) length(unique(var)) == 1)
df[, length == 0]
length(df[1,])
colSums(df[1,])
colSums(df[,1])
df[,colSums(df!="")>0]
df[, colSums(df != "") != 0]
df[, colSums(df != "") != 0]
View(df)
df[, colSums(df != "") == 0]
sparkdata <- read.csv("~/sparkdata", header=FALSE)
View(sparkdata)
fit1=lm(V1~V2,data=sparkdata)
fit
fit1
summary(fit1)
plot(V1~V2,sparkdata)
fit1=lm(V2~V1,data=sparkdata)
summary(fit1)
plot(V2~V1,sparkdata)
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
predict(fit1,data.frame(lstat=c(5,10,15)),interval="confidence")
predict(fit1,data.frame(lstat=c(5,10,15)),interval="confidence")
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
predict(fit1,data.frame(lstat=c(5,10,15)),interval="confidence")
library(MASS)
library(ISLR)
### Simple linear regression
names(Boston)
?Boston
plot(medv~lstat,Boston)
fit1=lm(medv~lstat,data=Boston)
fit1
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
predict(fit1,data.frame(lstat=c(5,10,15)),interval="confidence")
predict(fit1,data.frame(lstat=c(5,10,15)),interval="confidence")
library(MASS)
library(ISLR)
### Simple linear regression
names(Boston)
?Boston
plot(V2~V1,sparkdata)
fit1=lm(V2~V1,data=sparkdata)
fit1
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
predict(fit1,data.frame(lstat=c(5,10)),interval="confidence")
predict(fit1,data.frame(lstat=c(5)),interval="confidence")
?predict
predict(fit1,data.frame(lstat=c(5)),interval="confidence")
names(fit1)
confint(fit1)
predict(fit1)
predict(fit1,data.frame(lstat=c(5)))
predict(fit1,5)
predict(fit1,20000)
fit1
summary(fit1)
predict(fit1,data.frame(lstat=c(5,10,15)),interval="confidenc
?Boston
plot(V2~V1,sparkdata)
fit1=lm(V2~V1,data=sparkdata)
fit1
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
View(sparkdata)
x = c(0,1,3,2)
y = c(0,1,2,3)
df = data.frame(x,y)
predict(fit1,data.frame(lstat=c(5,10,15)),interval="confidence")df
df
?Boston
plot(V2~V1,df)
fit1=lm(V2~V1,data=df)
fit1
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
names(Boston)
?Boston
plot(V2~V1,df)
fit1=lm(V2~V1,data=df)
fit1
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
x = c(0,1,3,2)
y = c(0,1,2,3)
df = data.frame(x,y)
names(Boston)
?Boston
plot(V2~V1,df)
fit1=lm(V2~V1,data=df)
fit1
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
?colnames
colnames(df) <- c("v1", "v2")
names(Boston)
?Boston
plot(v2~v1,df)
fit1=lm(v2~v1,data=df)
fit1
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
names(Boston)
?Boston
plot(V2~V1,sparkdata)
fit1=lm(V2~V1,data=sparkdata)
fit1
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
x <- c(0.64514742748,0.646460546735,0.652429270622,0.647654291512,0.651641399069,0.644574429987,0.640515697744,0.653408141339,0.66193147905,0.67066969082,0.670216067805,0.653527515817,0.659543989495,0.662910349767,0.668115076997,0.655007759341,0.652835143846,0.646412796944,0.649540408261,0.645815924555,0.650256655127,0.642640563448,0.638701205682,0.652572519995,0.651426525009,0.650972901994,0.665130715053,0.6654172138,0.6584457443,0.651856273129,0.616115554494,0.615160558673,0.60830846365,0.62943774621,0.622633400979,0.624304643667,0.626023636147,0.620818908917,0.624137519398,0.63249373284,0.635191596037,0.634594723648,0.648609287334,0.650017906172,0.673224304644,0.661095857706,0.665106840158,0.677354661573,0.679813775815,0.67850065656,0.678906529784,0.677736659902,0.671242688313,0.68026739883,0.677665035215,0.895690581354,1.0,0.920711471887,0.861644980303,0.831944610242)
sparkdata$x <- x
plot(x~V1,sparkdata)
fit1=lm(x~V1,data=sparkdata)
fit1
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
plot(x~V1,sparkdata)
library(ggplot)
library(ggplot2)
p <- qplot(V1,V2, data = sparkdata)
p + geom_abline*()
p + geom_abline()
sparkdata[V2,]
sparkdata[,V2]
sparkdata$V2
sparkdata$V2[1:56]
sparkdata$V2[1:55]
mean(sparkdata$V2[1:55])
mean(sparkdata$V2[1:55])
sparkdata$V2[1:55]
sparkdata$V2[0:55]
sparkdata$V2[0:60]
sparkdata$V2[1:60]
sparkdata$V2[1:55]
sparkdata$V2[1:55]
mean(sparkdata$V2[1:55])
mean(sparkdata$V2[56:60])
sparkdata$V2[56:60]
mean(sparkdata$V2[56:60])
source('~/.active-rstudio-document', echo=TRUE)
library(ggplot2)
p <- qplot(V1,V2, data = sparkdata)
p + geom_abline()
p + labs(x = " Minute", y = "Number of visitors")
p + ggtitle("Number of visitors by minute")
library(ggplot2)
p <- qplot(V1,V2, data = sparkdata)
p + geom_abline()
p + labs(x = " Minute", y = "Number of visitors", title = "Number of visitors by minute")
setwd("~/Development")
setwd("~/Development/R/PokemonDualTypeAnalysis")
